using SharedKernel.SharedObjects.Paginations;
using SharedKernel.SharedObjects;
using Application.DTOs.Classificacoes.Adicionar;
using Application.DTOs.Classificacoes.Atualizar;
using Application.DTOs.Classificacoes.Excluir;
using Application.DTOs.Classificacoes.Filtro;
using Application.DTOs.Classificacoes;
using Domain.Commands.Classificacoes.Excluir;
using Domain.Commands.Classificacoes.Atualizar;
using Domain.Commands.Classificacoes.Adicionar;
using Application.DTOs.Operacoes.Adicionar;
using Application.DTOs.Operacoes.Atualizar;
using Application.DTOs.Operacoes.Excluir;
using Application.DTOs.Operacoes.Filtro;
using Application.DTOs.Operacoes;
using Domain.Commands.Operacoes.Adicionar;
using Domain.Commands.Operacoes.Atualizar;
using Domain.Commands.Operacoes.Excluir;
using Application.DTOs.ContasAPagar.Adicionar;
using Application.DTOs.ContasAPagar.Atualizar;
using Application.DTOs.ContasAPagar.Excluir;
using Application.DTOs.ContasAPagar.Filtro;
using Application.DTOs.ContasAPagar;
using Domain.Commands.ContasAPagar.Adicionar;
using Domain.Commands.ContasAPagar.Atualizar;
using Domain.Commands.ContasAPagar.Excluir;
using Application.DTOs.Cartoes.Adicionar;
using Application.DTOs.Cartoes.Atualizar;
using Application.DTOs.Cartoes.Excluir;
using Application.DTOs.Cartoes.Filtro;
using Domain.Commands.Cartoes.Adicionar;
using Domain.Commands.Cartoes.Atualizar;
using Domain.Commands.Cartoes.Excluir;
using Application.DTOs.ContasAPagarPago.Adicionar;
using Application.DTOs.ContasAPagarPago.Atualizar;
using Application.DTOs.ContasAPagarPago.Excluir;
using Application.DTOs.ContasAPagarPago.Filtro;
using Application.DTOs.ContasAPagarPago;
using Domain.Commands.ContasAPagarPago.Adicionar;
using Domain.Commands.ContasAPagarPago.Atualizar;
using Domain.Commands.ContasAPagarPago.Excluir;
using Application.DTOs.ContasAReceber.Adicionar;
using Application.DTOs.ContasAReceber.Atualizar;
using Application.DTOs.ContasAReceber.Excluir;
using Application.DTOs.ContasAReceber.Filtro;
using Application.DTOs.ContasAReceber;
using Domain.Commands.ContasAReceber.Adicionar;
using Domain.Commands.ContasAReceber.Atualizar;
using Domain.Commands.ContasAReceber.Excluir;
using Application.DTOs.Financeiros;
using Application.DTOs.PlanosDeContas.Adicionar;
using Application.DTOs.PlanosDeContas.Atualizar;
using Application.DTOs.PlanosDeContas.Excluir;
using Application.DTOs.PlanosDeContas.Filtro;
using Application.DTOs.PlanosDeContas;
using Domain.Commands.PlanosDeContas.Adicionar;
using Domain.Commands.PlanosDeContas.Atualizar;
using Domain.Commands.PlanosDeContas.Excluir;
using Application.DTOs.Comissoes;
using Application.DTOs.Financeiros.ContasAReceber.Filtro;

namespace Application.Interfaces.Financeiros
{
    public interface IFinanceiroService
    {
        Task<PaginacaoResponse<CentroCustoFilterDto>> RetornarPaginacao(PaginacaoRequest paginacaoRequest);
        Task<PaginacaoResponse<CentroCustoFilterDto>> RetornarCentroCustoContaAReceberPaginacao(PaginacaoRequest paginacaoRequest);
        Task<FormularioResponse<AdicionarClassificacaoCommand>> AdicionarClassificacao(AdicionarClassificacaoRequestDto dtos, CancellationToken cancellationToken);
        Task<FormularioResponse<AtualizarClassificacaoCommand>> AtualizarClassificacao(AtualizarClassificacaoRequestDto dto, CancellationToken cancellationToken);
        Task<List<FormularioResponse<ExcluirClassificacaoCommand>>> ExcluirClassificacao(ExcluirClassificacaoDto dtos, CancellationToken cancellationToken);
        Task<PaginacaoResponse<ClassificacaoFilterDto>> RetornarClassificacaoPaginacao(PaginacaoRequest paginacaoRequest);
        Task<ClassificacaoByCodeDto?> RetornarClassificacaoPorId(Guid id);
        Task<List<DespesaByCodeDto?>> RetornarDespesaCentroCusto(Guid idCentruCusto);
        Task<List<DespesaByCodeDto?>> RetornarDespesaCentroCustoContaAReceber(Guid idCentroCustoContaAReceber);
        Task<FormularioResponse<AdicionarOperacaoCommand>> AdicionarOperacao(AdicionarOperacaoRequestDto dtos, CancellationToken cancellationToken);
        Task<FormularioResponse<AtualizarOperacaoCommand>> AtualizarOperacao(AtualizarOperacaoRequestDto dto, CancellationToken cancellationToken);
        Task<List<FormularioResponse<ExcluirOperacaoCommand>>> ExcluirOperacao(ExcluirOperacaoDto dtos, CancellationToken cancellationToken);
        Task<PaginacaoResponse<OperacaoFilterDto>> RetornarOperacaoPaginacao(PaginacaoRequest paginacaoRequest);
        Task<OperacaoByCodeDto?> RetornarOperacaoPorId(Guid id);
        Task<FormularioResponse<AdicionarContaAPagarCommand>> AdicionarContaAPagar(AdicionarContaAPagarRequestDto dtos, CancellationToken cancellationToken);
        Task<FormularioResponse<AtualizarContaAPagarCommand>> AtualizarContaAPagar(AtualizarContaAPagarRequestDto dto, CancellationToken cancellationToken);
        Task<List<FormularioResponse<ExcluirContaAPagarCommand>>> ExcluirContaAPagar(ExcluirContaAPagarDto dtos, CancellationToken cancellationToken);
        Task<PaginacaoResponse<ContaAPagarFilterDto>> RetornarContaAPagarPaginacao(PaginacaoRequest paginacaoRequest);
        Task<ContaAPagarByCodeDto?> RetornarContaAPagarPorId(Guid id);
        Task<FormularioResponse<AdicionarCartaoCommand>> AdicionarCartao(AdicionarCartaoRequestDto dtos, CancellationToken cancellationToken);
        Task<FormularioResponse<AtualizarCartaoCommand>> AtualizarCartao(AtualizarCartaoRequestDto dto, CancellationToken cancellationToken);
        Task<List<FormularioResponse<ExcluirCartaoCommand>>> ExcluirCartao(ExcluirCartaoDto dtos, CancellationToken cancellationToken);
        Task<PaginacaoResponse<CartaoFilterDto>> RetornarCartaoPaginacao(PaginacaoRequest paginacaoRequest);
        Task<CartaoByCodeDto?> RetornarCartaoPorId(Guid id);
        Task<FormularioResponse<AdicionarContaAPagarPagoCommand>> AdicionarContaAPagarPago(AdicionarContaAPagarPagoRequestDto dtos, CancellationToken cancellationToken);
        Task<FormularioResponse<AtualizarContaAPagarPagoCommand>> AtualizarContaAPagarPago(AtualizarContaAPagarPagoRequestDto dto, CancellationToken cancellationToken);
        Task<List<FormularioResponse<ExcluirContaAPagarPagoCommand>>> ExcluirContaAPagarPago(ExcluirContaAPagarPagoDto dtos, CancellationToken cancellationToken);
        Task<PaginacaoResponse<ContaAPagarPagoFilterDto>> RetornarContaAPagarPagoPaginacao(PaginacaoRequest paginacaoRequest);
        Task<ContaAPagarPagoByCodeDto?> RetornarContaAPagarPagoPorId(Guid id);
        Task<FormularioResponse<AdicionarContaAReceberCommand>> AdicionarContaAReceber(AdicionarContaAReceberRequestDto dtos, CancellationToken cancellationToken);
        Task<FormularioResponse<AtualizarContaAReceberCommand>> AtualizarContaAReceber(AtualizarContaAReceberRequestDto dto, CancellationToken cancellationToken);
        Task<List<FormularioResponse<ExcluirContaAReceberCommand>>> ExcluirContaAReceber(ExcluirContaAReceberDto dtos, CancellationToken cancellationToken);
        Task<PaginacaoResponse<ContaAReceberFilterDto>> RetornarContaAReceberPaginacao(PaginacaoRequest paginacaoRequest);
        Task<ContaAReceberByCodeDto?> RetornarContaAReceberPorId(Guid id);
        Task<List<ContaAReceberGetDto?>> RetornarContaAReceber(string? status, DateTime? dataInicial, DateTime? dataFinal);
        Task<FormularioResponse<AdicionarPlanoDeContasCommand>> AdicionarPlanoDeContas(AdicionarPlanoDeContasRequestDto dtos, CancellationToken cancellationToken);
        Task<FormularioResponse<AtualizarPlanoDeContasCommand>> AtualizarPlanoDeContas(AtualizarPlanoDeContasRequestDto dto, CancellationToken cancellationToken);
        Task<List<FormularioResponse<ExcluirPlanoDeContasCommand>>> ExcluirPlanoDeContas(ExcluirPlanoDeContasDto dtos, CancellationToken cancellationToken);
        Task<PaginacaoResponse<PlanoDeContasFilterDto>> RetornarPlanoDeContasPaginacao(PaginacaoRequest paginacaoRequest);
        Task<PlanoDeContasByCodeDto?> RetornarPlanoDeContasPorId(Guid id);
    }
}
